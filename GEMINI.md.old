# Gemini Workspace

This document outlines the conventions and configurations for the `@tesd-tech/ps-package` project, specifically for interacting with the Gemini AI.

## Project Overview

This is a Node.js project that provides a command-line interface (CLI) for creating and managing PowerSchool plugin archives.

## Core Mandates

- **Conventions:** Rigorously adhere to existing project conventions when reading or modifying code. Analyze surrounding code, tests, and configuration first.
- **Libraries/Frameworks:** NEVER assume a library/framework is available or appropriate. Verify its established usage within the project (check imports, configuration files like 'package.json', or observe neighboring files) before employing it.
- **Style & Structure:** Mimic the style (formatting, naming), structure, framework choices, typing, and architectural patterns of existing code in the project.
- **Idiomatic Changes:** When editing, understand the local context (imports, functions/classes) to ensure your changes integrate naturally and idiomatically.
- **Comments:** Add code comments sparingly. Focus on *why* something is done, especially for complex logic, rather than *what* is done. Only add high-value comments if necessary for clarity or if requested by the user. Do not edit comments that are separate from the code you are changing. *NEVER* talk to the user or describe your changes through comments.
- **Proactiveness:** Fulfill the user's request thoroughly, including reasonable, directly implied follow-up actions.
- **Confirm Ambiguity/Expansion:** Do not take significant actions beyond the clear scope of the request without confirming with the user. If asked *how* to do something, explain first, don't just do it.
- **Explaining Changes:** After completing a code modification or file operation *do not* provide summaries unless asked.

High Priority Rule: To prevent errors, if a file editing tool fails or reports no changes were made, you must resynchronize your knowledge by reading the file again before re-attempting the edit. Do not assume your cached version of the file is correct.

## Building and running

While there is no pre-flight check, it is crucial to validate any changes. This can be done by building the repository and running all tests.

To run the full suite of checks, execute the following command:

```bash
pnpm build && pnpm test
```

This single command ensures that your changes meet all the quality gates of the project.

## Writing Tests

This project does not currently have a testing framework configured. When adding tests, aim to follow existing patterns. Key conventions include:

### Test Structure and Framework

- **File Location**: Test files (`*.test.js` for logic) should be co-located with the source files they test.

### General Guidance

- When adding tests, first examine existing tests to understand and conform to established conventions.

## Git Repo

The main branch for this project is called "main"

## JavaScript/TypeScript

When contributing to this Node.js and TypeScript codebase, please prioritize the use of plain JavaScript objects with accompanying TypeScript interface or type declarations over JavaScript class syntax. This approach offers significant advantages in terms of interoperability and overall code maintainability.

### Preferring Plain Objects over Classes

JavaScript classes, by their nature, are designed to encapsulate internal state and behavior. While this can be useful in some object-oriented paradigms, it often introduces unnecessary complexity and friction. Here's why plain objects are preferred:

- **Reduced Boilerplate and Increased Conciseness**: Classes often promote the use of constructors, this binding, getters, setters, and other boilerplate that can unnecessarily bloat code. TypeScript interface and type declarations provide powerful static type checking without the runtime overhead or verbosity of class definitions. This allows for more succinct and readable code, aligning with JavaScript's strengths in functional programming.

- **Enhanced Readability and Predictability**: Plain objects, especially when their structure is clearly defined by TypeScript interfaces, are often easier to read and understand. Their properties are directly accessible, and there's no hidden internal state or complex inheritance chains to navigate. This predictability leads to fewer bugs and a more maintainable codebase.

- **Simplified Immutability**: While not strictly enforced, plain objects encourage an immutable approach to data. When you need to modify an object, you typically create a new one with the desired changes, rather than mutating the original. This pattern helps prevent subtle bugs related to shared mutable state.

- **Better Serialization and Deserialization**: Plain JavaScript objects are naturally easy to serialize to JSON and deserialize back, which is a common requirement in web development (e.g., for API communication or local storage). Classes, with their methods and prototypes, can complicate this process.

### Embracing ES Module Syntax for Encapsulation

Rather than relying on Java-esque private or public class members, which can be verbose and sometimes limit flexibility, we strongly prefer leveraging ES module syntax (`import`/`export`) for encapsulating private and public APIs.

- **Clearer Public API Definition**: With ES modules, anything that is exported is part of the public API of that module, while anything not exported is inherently private to that module. This provides a very clear and explicit way to define what parts of your code are meant to be consumed by other modules.

- **Enhanced Testability (Without Exposing Internals)**: By default, unexported functions or variables are not accessible from outside the module. This encourages you to test the public API of your modules, rather than their internal implementation details. If you find yourself needing to spy on or stub an unexported function for testing purposes, it's often a "code smell" indicating that the function might be a good candidate for extraction into its own separate, testable module with a well-defined public API. This promotes a more robust and maintainable testing strategy.

- **Reduced Coupling**: Explicitly defined module boundaries through import/export help reduce coupling between different parts of your codebase. This makes it easier to refactor, debug, and understand individual components in isolation.

### Avoiding `any` Types and Type Assertions; Preferring `unknown`

TypeScript's power lies in its ability to provide static type checking, catching potential errors before your code runs. To fully leverage this, it's crucial to avoid the `any` type and be judicious with type assertions.

- **The Dangers of `any`**: Using any effectively opts out of TypeScript's type checking for that particular variable or expression. While it might seem convenient in the short term, it introduces significant risks:
  - **Loss of Type Safety**: You lose all the benefits of type checking, making it easy to introduce runtime errors that TypeScript would otherwise have caught.
  - **Reduced Readability and Maintainability**: Code with `any` types is harder to understand and maintain, as the expected type of data is no longer explicitly defined.
  - **Masking Underlying Issues**: Often, the need for any indicates a deeper problem in the design of your code or the way you're interacting with external libraries. It's a sign that you might need to refine your types or refactor your code.

- **Preferring `unknown` over `any`**: When you absolutely cannot determine the type of a value at compile time, and you're tempted to reach for any, consider using unknown instead. unknown is a type-safe counterpart to any. While a variable of type unknown can hold any value, you must perform type narrowing (e.g., using typeof or instanceof checks, or a type assertion) before you can perform any operations on it. This forces you to handle the unknown type explicitly, preventing accidental runtime errors.

  ```
  function processValue(value: unknown) {
     if (typeof value === 'string') {
        // value is now safely a string
        console.log(value.toUpperCase());
     } else if (typeof value === 'number') {
        // value is now safely a number
        console.log(value * 2);
     }
     // Without narrowing, you cannot access properties or methods on 'value'
     // console.log(value.someProperty); // Error: Object is of type 'unknown'.
  }
  ```

- **Type Assertions (`as Type`) - Use with Caution**: Type assertions tell the TypeScript compiler, "Trust me, I know what I'm doing; this is definitely of this type." While there are legitimate use cases (e.g., when dealing with external libraries that don't have perfect type definitions, or when you have more information than the compiler), they should be used sparingly and with extreme caution.
  - **Bypassing Type Checking**: Like `any`, type assertions bypass TypeScript's safety checks. If your assertion is incorrect, you introduce a runtime error that TypeScript would not have warned you about.
  - **Code Smell in Testing**: A common scenario where `any` or type assertions might be tempting is when trying to test "private" implementation details (e.g., spying on or stubbing an unexported function within a module). This is a strong indication of a "code smell" in your testing strategy and potentially your code structure. Instead of trying to force access to private internals, consider whether those internal details should be refactored into a separate module with a well-defined public API. This makes them inherently testable without compromising encapsulation.

### Embracing JavaScript's Array Operators

To further enhance code cleanliness and promote safe functional programming practices, leverage JavaScript's rich set of array operators as much as possible. Methods like `.map()`, `.filter()`, `.reduce()`, `.slice()`, `.sort()`, and others are incredibly powerful for transforming and manipulating data collections in an immutable and declarative way.

Using these operators:

- **Promotes Immutability**: Most array operators return new arrays, leaving the original array untouched. This functional approach helps prevent unintended side effects and makes your code more predictable.
- **Improves Readability**: Chaining array operators often lead to more concise and expressive code than traditional for loops or imperative logic. The intent of the operation is clear at a glance.
- **Facilitates Functional Programming**: These operators are cornerstones of functional programming, encouraging the creation of pure functions that take inputs and produce outputs without causing side effects. This paradigm is highly beneficial for writing robust and testable code.

By consistently applying these principles, we can maintain a codebase that is not only efficient and performant but also a joy to work with, both now and in the future.

## Comments policy

Only write high-value comments if at all. Avoid talking to the user through comments.

## General style requirements

Use hyphens instead of underscores in flag names (e.g. `my-flag` instead of `my_flag`).

## Commands

### Installation

```bash
pnpm install
```

### Build

```bash
pnpm build
```

### Release

```bash
pnpm release
```


### File Editing
Golden Rule: Treat every edit as a “surgical, precise replacement,” not a “fuzzy adjustment.”
Principle 1: Replace, Don’t Modify
Action Guideline: Target the smallest, complete logical block and provide a brand new block to completely replace it.
DO:
Replace entire lines or whole methods/logical blocks.
Example:
// ... existing code ...
public int CalculateTotalPrice() { /* new, improved logic */ }
// ... existing code ...
DON’T:
Try to only change part of a line or just rename a method in place.
Example:
// ... existing code ...
CalculateNewTotalPrice() // Only changing the method name—very risky
// ... existing code ...
Principle 2: Anchors Must Be Unique
Action Guideline: The context you use as anchors (e.g., // ... existing code ...) must be unique within the file, just like a fingerprint.
DO:
Include enough surrounding context to ensure uniqueness.
Example:
// ... existing code ...
var result = await _service.GetSpecificData(id);
return View(result); // <--- This context combination is likely unique
// ... existing code ...
DON’T:
Use generic or potentially repeated code as an anchor (e.g., just a closing bracket).
Example:
// ... existing code ...
} // <--- Highly likely to be a repeated anchor
// ... existing code ...
Principle 3: Code Must Be Complete
Action Guideline: The submitted code_edit must be a syntactically correct, logically self-contained unit. Don’t make the model guess.
DO:
Make sure the code you submit can be copy-pasted into the IDE without syntax errors.
DON’T:
Submit incomplete statements.
Example:
// ... existing code ...
var user = new User { Name = // <--- Incomplete code
// ... existing code ...
Principle 4: Decompose Complex Tasks
Action Guideline: Large refactors = multiple consecutive, simple, and safe small replacements.
DO:
First edit_file: Add a new helper method.
Second edit_file: Replace the old logic block with code that calls the new method.
DON’T:
Define a new method and change all its usages in multiple places within a single edit_file operation.
Principle 5: Instructions Must Accurately Describe
Action Guideline: The instructions parameter should be a one-sentence, precise summary of the code_edit.
DO:
Example: instructions: "I will replace the user validation logic with a call to the new AuthService."
DON’T:
Use vague instructions like instructions: "Fix bug" or instructions: "Update code" (too broad and not helpful).